ttt5_224_160.cfgを固定小数点化

■まとめ
方法
darknetのgemm_nnを改造して固定少数点演算に変更して検証
①8bitの固定小数点化では、推定誤差を誤る
②最低でも21bitの固定少数化が必要で、これでは16bit半精度浮動小数点より転送量が大きくなってしまう

■計算対象の実際の数値
darknet detect cfg/ttt5_224_160.cfg data/ttt/ttt5_224_160_final.weights data/dog.jpg

weightの実際の値
最大　： 0.240972
最小　：-0.561643

A行列の実際の値
最大　： 1.404771
最小　：-1.306205

B行列の実際の値
最大　： 99.264549
最小　：-11.236341

C行列の実際の値
最大　： 114.481514
最小　：-286.090332

■必要な固定少数点フォーマットは？
darknet detect cfg/ttt5_224_160.cfg data/ttt/ttt5_224_160_final.weights data/dog.jpg

Sign          1bit
Exponential   9bit(-286まで考えるから)
Fraction     11bit(実験結果から求めた)
なので、最低でも21bitが必要になる
なのでhalfでの16bit半精度浮動小数点より転送量が大きくなってしまう

①小数部6bitとして語長16bitにすると
推定結果を誤る⇒小数部が不足している

②小数部21bitとして語長32bitにすると
推定結果はほぼ正解

③小数部11bitとして語長32bitにすると
推定結果はほぼ正解

④小数部10bitとして語長32bitにすると
推定結果を誤る⇒小数部が不足している
